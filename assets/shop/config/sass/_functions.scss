@use 'sass:map';
@use 'sass:string';
@use '~mathsass/dist/math' as MathSass;
@use './variables/' as *;


@function rem ($num, $base: $font--default-base) {
  @return (strip-unit($num) / $base) * 1rem;
}

@function em ($num, $base: $font--default-base) {
  @return (strip-unit($num) / $base) * 1em;
}

@function px ($num, $base: $font--default-base) {
  @return (strip-unit($num) * $base) * 1px;
}

@function strip-unit ($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function space ($i, $base: $common--base-space) {
  @return rem($i * $base);
}

@function to-number ($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }

  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);

    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), string.slice($value, $i))
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}

@function to-length ($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

@function str-split ($separator, $string) {
  $index: string.index($string, $separator);

  @if $index {
    @return join((string.slice($string, 1, $index - 1)), str-split($separator, string.slice($string, $index + string.length($separator))));
  }

  @return ($string);
}

@function str-replace ($search, $replace, $string) {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace($search, $replace, string.slice($string, $index + string.length($search)));
  }

  @return $string;
}

@function get-color ($name) {
  @if map.has-key($colors, $name) {
    @return map.get($colors, $name);
  }
  @else {
    @return currentColor;
  }
}
